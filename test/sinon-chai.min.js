"use strict";!function(e){"function"==typeof require&&"object"==typeof exports&&"object"==typeof module?module.exports=e:"function"==typeof define&&define.amd?define(function(){return e}):chai.use(e)}(function(e,t){var a,n,c,l=Array.prototype.slice;function i(e){return"function"==typeof e&&"function"==typeof e.getCall&&"function"==typeof e.calledWithExactly}function o(e){if(!i(e._obj)&&(!(a=e._obj)||!i(a.proxy)))throw new TypeError(t.inspect(e._obj)+" is not a spy or a call to a spy!");var a}function r(e,t,a,n,c){var l=n?"always have ":"have ";function o(t){return e.printf.apply(e,t)}return a=a||"",i(e.proxy)&&(e=e.proxy),{affirmative:function(){return o(["expected %n to "+l+t+a].concat(c))},negative:function(){return o(["expected %n to not "+l+t].concat(c))}}}function s(a,n,c){t.addProperty(e.Assertion.prototype,a,function(){o(this);var e=r(this._obj,n,c,!1);this.assert(this._obj[a],e.affirmative,e.negative)})}function d(e,a,n){return function(){o(this);var c="always"+e[0].toUpperCase()+e.substring(1),i=t.flag(this,"always")&&"function"==typeof this._obj[c],s=i?c:e,d=r(this._obj,a,n,i,l.call(arguments));this.assert(this._obj[s].apply(this._obj,arguments),d.affirmative,d.negative)}}function f(a,n,c,l){var i=d(n,c,l);t.addMethod(e.Assertion.prototype,a,i)}function u(e,t,a){f(e,e,t,a)}t.addProperty(e.Assertion.prototype,"always",function(){t.flag(this,"always",!0)}),s("called","been called"," at least once, but it was never called"),a="callCount",n="been called exactly %1",c=", but it was called %c%C",t.addMethod(e.Assertion.prototype,a,function(e){o(this);var t=r(this._obj,n,c,!1,[function(e){switch(e){case 1:return"once";case 2:return"twice";case 3:return"thrice";default:return(e||0)+" times"}}(e)]);this.assert(this._obj[a]===e,t.affirmative,t.negative)}),s("calledOnce","been called exactly once",", but it was called %c%C"),s("calledTwice","been called exactly twice",", but it was called %c%C"),s("calledThrice","been called exactly thrice",", but it was called %c%C"),function(a,n,c){var l=d(a,n,c);t.addProperty(e.Assertion.prototype,a,l)}("calledWithNew","been called with new"),u("calledBefore","been called before %1"),u("calledAfter","been called after %1"),u("calledImmediatelyBefore","been called immediately before %1"),u("calledImmediatelyAfter","been called immediately after %1"),u("calledOn","been called with %1 as this",", but it was called with %t instead"),u("calledWith","been called with arguments %*","%D"),u("calledOnceWith","been called exactly once with arguments %*","%D"),u("calledWithExactly","been called with exact arguments %*","%D"),u("calledOnceWithExactly","been called exactly once with exact arguments %*","%D"),u("calledWithMatch","been called with arguments matching %*","%D"),u("returned","returned %1"),f("thrown","threw","thrown %1")});
